@use 'sass:color';
@use 'variables' as vars;
@use 'mixins' as mix;

// Filters section
.filters {
  margin: 1.5rem 0;
  position: relative;
  
  // Animaci칩n para los filtros
  opacity: 0;
  transform: translateY(15px);
  animation: fadeInUp 1.7s ease forwards;
  animation-delay: 0.4s;
  
  .filter-chips {
    @include mix.flex(row, center, flex-start, 0.75rem);
    flex-wrap: wrap;
    margin-bottom: 1rem;
  }
  
  .filter-chip {
    padding: 0.5rem 1rem;
    border-radius: vars.$border-radius-xl;
    background: vars.$bg-light;
    color: vars.$text-medium;
    font-size: 0.9rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: vars.$box-shadow-sm;
    
    // Animaci칩n individual para cada chip (sin transform para evitar conflictos con z-index)
    opacity: 0;
    animation: chipFadeIn 1.5s ease forwards;
    
    @for $i from 1 through 40 {
      &:nth-child(#{$i}) {
        animation-delay: #{0.6 + $i * 0.05}s;
      }
    }
    
    &:hover {
      background: color.scale(vars.$bg-light, $lightness: -5%);
    }
    
    &.active {
      background: linear-gradient(90deg, vars.$primary-color, vars.$primary-dark);
      color: vars.$white;
      box-shadow: vars.$box-shadow-md;
    }
  }
}

// Animaci칩n para los chips de filtro (solo opacity para evitar problemas con z-index)
@keyframes chipFadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

// Keyframe para fadeInUp (si no est치 definido en otro lugar)
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(15px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}
